{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["'use strict';\r\n\r\n/*\r\n * Created with @iobroker/create-adapter v1.16.0\r\n */\r\n\r\n// The adapter-core module gives you access to the core ioBroker functions\r\n// you need to create an adapter\r\nimport * as utils from '@iobroker/adapter-core';\r\nimport { Accuapi } from './lib/accuapi';\r\nimport * as nextHour from './lib/nexthour-obj';\r\nlet updateInterval: ioBroker.Interval | undefined = undefined;\r\nlet timeout1: ioBroker.Timeout | undefined = undefined;\r\nlet timeout2: ioBroker.Timeout | undefined = undefined;\r\nlet timeout3: ioBroker.Timeout | undefined = undefined;\r\n\r\nclass Accuweather extends utils.Adapter {\r\n    forecast: Accuapi | undefined;\r\n    /**\r\n     * @param [options] - Optional settings for the adapter\r\n     */\r\n    constructor(options = {}) {\r\n        super({\r\n            ...options,\r\n            name: 'accuweather',\r\n            strictObjectChecks: false,\r\n        });\r\n        this.on('ready', this.onReady.bind(this));\r\n        this.on('stateChange', this.onStateChange.bind(this));\r\n        this.on('unload', this.onUnload.bind(this));\r\n    }\r\n\r\n    getCardinalDirection(angle: number): string {\r\n        if (typeof angle === 'string') {\r\n            angle = parseInt(angle);\r\n        }\r\n        if (angle <= 0 || angle > 360 || typeof angle === 'undefined') {\r\n            return '\u2608';\r\n        }\r\n        const arrows: Record<string, string> = {\r\n            north: '\u2191N',\r\n            north_east: '\u2197NE',\r\n            east: '\u2192E',\r\n            south_east: '\u2198SE',\r\n            south: '\u2193S',\r\n            south_west: '\u2199SW',\r\n            west: '\u2190W',\r\n            north_west: '\u2196NW',\r\n        };\r\n        const directions = Object.keys(arrows);\r\n        const degree = 360 / directions.length;\r\n        angle = angle + degree / 4;\r\n        for (let i = 0; i < directions.length; i++) {\r\n            if (angle >= i * degree && angle < (i + 1) * degree) {\r\n                return arrows[directions[i]];\r\n            }\r\n        }\r\n        return arrows.north;\r\n    }\r\n\r\n    async setDailyStates(obj: any): Promise<void> {\r\n        this.log.debug(`Daily: ${JSON.stringify(obj)}`);\r\n        const days = obj.DailyForecasts;\r\n        try {\r\n            for (let day = 1; day <= 5; day++) {\r\n                const json = days[day - 1];\r\n                for (const key in json) {\r\n                    let dt = null;\r\n                    switch (key) {\r\n                        case 'Date':\r\n                            dt = new Date(json[key]);\r\n                            await this.setState(`Daily.Day${day}.${key}`, {\r\n                                val: json[key],\r\n                                ack: true,\r\n                            });\r\n                            await this.setState(`Summary.DateTime_d${day}`, {\r\n                                val: json[key],\r\n                                ack: true,\r\n                            });\r\n                            await this.setState(`Summary.DayOfWeek_d${day}`, {\r\n                                val: dt.toLocaleString(this.config.language, {\r\n                                    weekday: 'short',\r\n                                }),\r\n                                ack: true,\r\n                            });\r\n                            break;\r\n                        case 'Sun':\r\n                            await this.setState(`Daily.Day${day}.Sunrise`, {\r\n                                val: json[key].Rise,\r\n                                ack: true,\r\n                            });\r\n                            await this.setState(`Daily.Day${day}.Sunset`, {\r\n                                val: json[key].Set,\r\n                                ack: true,\r\n                            });\r\n                            if (day === 1) {\r\n                                await this.setState('Summary.Sunrise', {\r\n                                    val: json[key].Rise,\r\n                                    ack: true,\r\n                                });\r\n                                await this.setState('Summary.Sunset', {\r\n                                    val: json[key].Set,\r\n                                    ack: true,\r\n                                });\r\n                            }\r\n                            break;\r\n                        case 'HoursOfSun':\r\n                            await this.setState(`Daily.Day${day}.HoursOfSun`, {\r\n                                val: json[key],\r\n                                ack: true,\r\n                            });\r\n                            if (day === 1) {\r\n                                await this.setState('Summary.HoursOfSun', {\r\n                                    val: json[key],\r\n                                    ack: true,\r\n                                });\r\n                            }\r\n                            break;\r\n                        case 'Temperature':\r\n                            await this.setState(`Daily.Day${day}.Temperature.Minimum`, {\r\n                                val: json[key].Minimum.Value,\r\n                                ack: true,\r\n                            });\r\n                            await this.setState(`Daily.Day${day}.Temperature.Maximum`, {\r\n                                val: json[key].Maximum.Value,\r\n                                ack: true,\r\n                            });\r\n                            await this.setState(`Summary.TempMin_d${day}`, {\r\n                                val: json[key].Minimum.Value,\r\n                                ack: true,\r\n                            });\r\n                            await this.setState(`Summary.TempMax_d${day}`, {\r\n                                val: json[key].Maximum.Value,\r\n                                ack: true,\r\n                            });\r\n                            break;\r\n                        case 'RealFeelTemperature':\r\n                            await this.setState(`Daily.Day${day}.RealFeelTemperature.Minimum`, {\r\n                                val: json[key].Minimum.Value,\r\n                                ack: true,\r\n                            });\r\n                            await this.setState(`Daily.Day${day}.RealFeelTemperature.Maximum`, {\r\n                                val: json[key].Maximum.Value,\r\n                                ack: true,\r\n                            });\r\n                            break;\r\n                        case 'Day':\r\n                        case 'Night':\r\n                            {\r\n                                const json1 = json[key];\r\n                                for (const key1 in json1) {\r\n                                    if (typeof json1[key1] !== 'object') {\r\n                                        await this.setState(`Daily.Day${day}.${key}.${key1}`, {\r\n                                            val: json1[key1],\r\n                                            ack: true,\r\n                                        });\r\n                                        if (key1 === 'Icon') {\r\n                                            await this.setState(`Daily.Day${day}.${key}.IconURL`, {\r\n                                                val: `https://developer.accuweather.com/sites/default/files/${String(json1[key1]).padStart(2, '0')}-s.png`,\r\n                                                ack: true,\r\n                                            });\r\n                                            await this.setState(`Daily.Day${day}.${key}.IconURLS`, {\r\n                                                val: `http://vortex.accuweather.com/adc2010/images/slate/icons/${String(json1[key1]).padStart(2, '0')}.svg`,\r\n                                                ack: true,\r\n                                            });\r\n                                            if (key === 'Day') {\r\n                                                await this.setState(`Summary.WeatherIconURL_d${day}`, {\r\n                                                    val: `http://vortex.accuweather.com/adc2010/images/slate/icons/${String(json1[key1]).padStart(2, '0')}.svg`,\r\n                                                    ack: true,\r\n                                                });\r\n                                                await this.setState(`Summary.WeatherIcon_d${day}`, {\r\n                                                    val: json1[key1],\r\n                                                    ack: true,\r\n                                                });\r\n                                            }\r\n                                        } else if (key === 'Day') {\r\n                                            if (key1 === 'IconPhrase') {\r\n                                                await this.setState(`Summary.WeatherText_d${day}`, {\r\n                                                    val: json1[key1],\r\n                                                    ack: true,\r\n                                                });\r\n                                            } else {\r\n                                                await this.setState(`Summary.${key1}_d${day}`, {\r\n                                                    val: json1[key1],\r\n                                                    ack: true,\r\n                                                });\r\n                                            }\r\n                                        }\r\n                                    } else if (typeof json1[key1] == 'object') {\r\n                                        if (json1[key1].Value !== undefined) {\r\n                                            if (['TotalLiquid', 'Rain', 'Snow', 'Ice'].includes(key1)) {\r\n                                                await this.setState(`Daily.Day${day}.${key}.${key1}Volume`, {\r\n                                                    val: json1[key1].Value,\r\n                                                    ack: true,\r\n                                                });\r\n                                                if (key === 'Day' && key1 === 'TotalLiquid') {\r\n                                                    await this.setState(`Summary.TotalLiquidVolume_d${day}`, {\r\n                                                        val: json1[key1].Value,\r\n                                                        ack: true,\r\n                                                    });\r\n                                                }\r\n                                            } else {\r\n                                                await this.setState(`Daily.Day${day}.${key}.${key1}`, {\r\n                                                    val: json1[key1].Value,\r\n                                                    ack: true,\r\n                                                });\r\n                                            }\r\n                                        } else if (key1 === 'Wind') {\r\n                                            await this.setState(`Daily.Day${day}.${key}.WindSpeed`, {\r\n                                                val: json1[key1].Speed.Value,\r\n                                                ack: true,\r\n                                            });\r\n                                            await this.setState(`Daily.Day${day}.${key}.WindDirection`, {\r\n                                                val: json1[key1].Direction.Degrees,\r\n                                                ack: true,\r\n                                            });\r\n                                            if (key === 'Day') {\r\n                                                await this.setState(`Summary.WindSpeed_d${day}`, {\r\n                                                    val: json1[key1].Speed.Value,\r\n                                                    ack: true,\r\n                                                });\r\n                                                await this.setState(`Summary.WindDirection_d${day}`, {\r\n                                                    val: json1[key1].Direction.Degrees,\r\n                                                    ack: true,\r\n                                                });\r\n                                                await this.setState(`Summary.WindDirectionStr_d${day}`, {\r\n                                                    val: this.getCardinalDirection(json1[key1].Direction.Degrees),\r\n                                                    ack: true,\r\n                                                });\r\n                                            }\r\n                                        } else if (key1 === 'WindGust') {\r\n                                            await this.setState(`Daily.Day${day}.${key}.WindGust`, {\r\n                                                val: json1[key1].Speed.Value,\r\n                                                ack: true,\r\n                                            });\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        } catch (err) {\r\n            this.log.error(String(err));\r\n        }\r\n    }\r\n\r\n    async setNextHourStates(obj: any, item: string, hour: string): Promise<void> {\r\n        this.log.debug(`Hours: ${JSON.stringify(obj)}`);\r\n        const json = obj[item];\r\n        try {\r\n            for (const key in json) {\r\n                if (typeof json[key] !== 'object') {\r\n                    await this.setState(`Hourly.h${hour}.${key}`, {\r\n                        val: json[key],\r\n                        ack: true,\r\n                    });\r\n                    if (key === 'WeatherIcon') {\r\n                        await this.setState(`Hourly.h${hour}.WeatherIconURL`, {\r\n                            val: `https://developer.accuweather.com/sites/default/files/${String(json[key]).padStart(2, '0')}-s.png`,\r\n                            ack: true,\r\n                        });\r\n                        await this.setState(`Hourly.h${hour}.WeatherIconURLS`, {\r\n                            val: `http://vortex.accuweather.com/adc2010/images/slate/icons/${String(json[key]).padStart(2, '0')}.svg`,\r\n                            ack: true,\r\n                        });\r\n                    }\r\n                } else if (typeof json[key] == 'object') {\r\n                    if (json[key].Value !== undefined) {\r\n                        if (['TotalLiquid', 'Rain', 'Snow', 'Ice'].includes(key)) {\r\n                            await this.setState(`Hourly.h${hour}.${key}Volume`, {\r\n                                val: json[key].Value,\r\n                                ack: true,\r\n                            });\r\n                        } else {\r\n                            await this.setState(`Hourly.h${hour}.${key}`, {\r\n                                val: json[key].Value,\r\n                                ack: true,\r\n                            });\r\n                        }\r\n                    } else if (key === 'Wind') {\r\n                        await this.setState(`Hourly.h${hour}.WindSpeed`, {\r\n                            val: json[key].Speed.Value,\r\n                            ack: true,\r\n                        });\r\n                        await this.setState(`Hourly.h${hour}.WindDirection`, {\r\n                            val: json[key].Direction.Degrees,\r\n                            ack: true,\r\n                        });\r\n                        await this.setState(`Hourly.h${hour}.WindDirectionText`, {\r\n                            val: json[key].Direction.Localized,\r\n                            ack: true,\r\n                        });\r\n                    } else if (key === 'WindGust') {\r\n                        await this.setState(`Hourly.h${hour}.WindGust`, {\r\n                            val: json[key].Speed.Value,\r\n                            ack: true,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        } catch (err) {\r\n            this.log.error(String(err));\r\n        }\r\n    }\r\n\r\n    async setCurrentStates(obj: any): Promise<void> {\r\n        this.log.debug(`Current: ${JSON.stringify(obj)}`);\r\n        const json = obj[0];\r\n        try {\r\n            for (const key in json) {\r\n                //this.log.debug(\"Current: \" + key + \": \" + typeof json[key]);\r\n                if (typeof json[key] !== 'object' || json[key] == null) {\r\n                    await this.setState(`Current.${key}`, { val: json[key], ack: true });\r\n\r\n                    if (key === 'WeatherIcon') {\r\n                        await this.setState('Current.WeatherIconURL', {\r\n                            val: `https://developer.accuweather.com/sites/default/files/${String(json[key]).padStart(2, '0')}-s.png`,\r\n                            ack: true,\r\n                        });\r\n                        await this.setState('Current.WeatherIconURLS', {\r\n                            val: `http://vortex.accuweather.com/adc2010/images/slate/icons/${String(json[key]).padStart(2, '0')}.svg`,\r\n                            ack: true,\r\n                        });\r\n                        await this.setState('Summary.WeatherIconURL', {\r\n                            val: `http://vortex.accuweather.com/adc2010/images/slate/icons/${String(json[key]).padStart(2, '0')}.svg`,\r\n                            ack: true,\r\n                        });\r\n                        await this.setState('Summary.WeatherIcon', {\r\n                            val: json[key],\r\n                            ack: true,\r\n                        });\r\n                    } else if (key === 'LocalObservationDateTime') {\r\n                        const dt = new Date(json[key]);\r\n                        const dow = dt.toLocaleString(this.config.language, {\r\n                            weekday: 'short',\r\n                        });\r\n                        await this.setState('Summary.CurrentDateTime', {\r\n                            val: json[key],\r\n                            ack: true,\r\n                        });\r\n                        await this.setState('Summary.DayOfWeek', { val: dow, ack: true });\r\n                        this.log.debug(\r\n                            `Date ${dt.getTime()}, dow: ${dt.toLocaleString(this.config.language, { weekday: 'short' })}`,\r\n                        );\r\n                    } else {\r\n                        await this.setState(`Summary.${key}`, {\r\n                            val: json[key],\r\n                            ack: true,\r\n                        });\r\n                    }\r\n                } else if (json[key] !== null) {\r\n                    if (json[key][this.config.metric] !== undefined) {\r\n                        //this.log.debug(key + \": \" + json[key][this.config.metric].Value);\r\n                        await this.setState(`Current.${key}`, {\r\n                            val: json[key][this.config.metric].Value,\r\n                            ack: true,\r\n                        });\r\n                        await this.setState(`Summary.${key}`, {\r\n                            val: json[key][this.config.metric].Value,\r\n                            ack: true,\r\n                        });\r\n                    } else if (key === 'Wind') {\r\n                        await this.setState('Current.WindSpeed', {\r\n                            val: json[key].Speed[this.config.metric].Value,\r\n                            ack: true,\r\n                        });\r\n                        await this.setState('Summary.WindSpeed', {\r\n                            val: json[key].Speed[this.config.metric].Value,\r\n                            ack: true,\r\n                        });\r\n                        await this.setState('Current.WindDirection', {\r\n                            val: json[key].Direction.Degrees,\r\n                            ack: true,\r\n                        });\r\n                        await this.setState('Current.WindDirectionText', {\r\n                            val: json[key].Direction.Localized,\r\n                            ack: true,\r\n                        });\r\n                        await this.setState('Summary.WindDirection', {\r\n                            val: json[key].Direction.Degrees,\r\n                            ack: true,\r\n                        });\r\n                        await this.setState('Summary.WindDirectionStr', {\r\n                            val: this.getCardinalDirection(json[key].Direction.Degrees),\r\n                            ack: true,\r\n                        });\r\n                    } else if (key === 'WindGust') {\r\n                        await this.setState('Current.WindGust', {\r\n                            val: json[key].Speed[this.config.metric].Value,\r\n                            ack: true,\r\n                        });\r\n                    } else if (key === 'PressureTendency') {\r\n                        await this.setState('Current.PressureTendency', {\r\n                            val: json[key].LocalizedText,\r\n                            ack: true,\r\n                        });\r\n                    } else if (key === 'Photos' && Array.isArray(json[key])) {\r\n                        const l = json[key].length;\r\n                        const index = Math.round(Math.random() * (l - 1));\r\n                        await this.setState('Current.LandscapeLink', json[key][index].LandscapeLink, true);\r\n                        await this.setState('Current.PortraitLink', json[key][index].PortraitLink, true);\r\n                    }\r\n                }\r\n            }\r\n            await this.setState('CurrentNextUpdate', Date.now(), true);\r\n        } catch (err) {\r\n            this.log.error(String(err));\r\n        }\r\n    }\r\n\r\n    async setHourlyStates(obj: any): Promise<void> {\r\n        for (const hr in obj) {\r\n            if (typeof obj[hr] === 'object' && obj[hr].DateTime) {\r\n                const d = new Date(obj[hr].DateTime);\r\n                await this.setNextHourStates(obj, hr, String(d.getHours()));\r\n            }\r\n        }\r\n        await this.setState('HourlyNextUpdate', Date.now(), true);\r\n    }\r\n\r\n    async request5Days(): Promise<void> {\r\n        if (typeof this.forecast !== 'undefined') {\r\n            const loc = this.config.loKey;\r\n            const lang = this.config.language;\r\n\r\n            this.forecast = this.forecast.localkey(loc).timeInt('daily/5day').language(lang).details(true).metric(true);\r\n\r\n            const res = await this.forecast.get();\r\n            await this.setDailyStates(res);\r\n        }\r\n        await this.setState('DailyNextUpdate', Date.now(), true);\r\n    }\r\n\r\n    async request12Hours(): Promise<void> {\r\n        if (typeof this.forecast !== 'undefined') {\r\n            const loc = this.config.loKey;\r\n            const lang = this.config.language;\r\n\r\n            this.forecast = this.forecast\r\n                .localkey(loc)\r\n                .timeInt('hourly/12hour')\r\n                .language(lang)\r\n                .details(true)\r\n                .metric(true);\r\n\r\n            const res = await this.forecast.get();\r\n            await this.setHourlyStates(res);\r\n        }\r\n    }\r\n\r\n    async requestCurrent(): Promise<void> {\r\n        if (typeof this.forecast !== 'undefined') {\r\n            const loc = this.config.loKey;\r\n            const lang = this.config.language;\r\n\r\n            this.forecast = this.forecast\r\n                .localkey(loc)\r\n                .timeInt()\r\n                .language(lang)\r\n                .details(true)\r\n                .metric(true)\r\n                .getphotos(true);\r\n\r\n            const res = await this.forecast.getCurrent();\r\n            await this.setCurrentStates(res);\r\n        }\r\n    }\r\n\r\n    async onReady(): Promise<void> {\r\n        const nameSpaceObj = await this.getForeignObjectAsync(this.namespace);\r\n        if (!nameSpaceObj) {\r\n            await this.setForeignObjectAsync(this.namespace, {\r\n                _id: this.namespace,\r\n                type: 'meta',\r\n                common: { name: 'Accuweather device', type: 'meta.folder' },\r\n                native: {},\r\n            });\r\n        }\r\n        const obj = await this.getForeignObjectAsync(`system.adapter.${this.namespace}`);\r\n\r\n        if (obj && obj.native && obj.native.apiKey) {\r\n            obj.native.apiKeyEncrypted = this.encrypt(obj.native.apiKey);\r\n            this.config.apiKeyEncrypted = obj.native.apiKey;\r\n            delete obj.native.apiKey;\r\n            await this.setForeignObjectAsync(`system.adapter.${this.namespace}`, obj);\r\n        }\r\n\r\n        if (this.config.metric !== 'Metric' && this.config.metric !== 'Imperial') {\r\n            this.config.metric = 'Metric';\r\n        }\r\n        if (!this.config.language) {\r\n            const systemConfig = await this.getForeignObjectAsync('system.config');\r\n            if (systemConfig && systemConfig.common && systemConfig.common.language) {\r\n                this.config.language = systemConfig.common.language;\r\n            }\r\n        }\r\n\r\n        //this.log.debug(`API: ${this.config.apiKey}; Loc: ${this.config.loKey} Lang: ${this.config.language}`);\r\n        this.log.debug(`API: ********; Loc: ${this.config.loKey} Lang: ${this.config.language}`);\r\n\r\n        if (this.config.apiKeyEncrypted) {\r\n            this.forecast = new Accuapi(this.config.apiKeyEncrypted);\r\n        } else {\r\n            this.log.error('API Key is missing. Please enter Accuweather API key');\r\n            return;\r\n        }\r\n        await nextHour.createHourlyForecastObjects(this);\r\n        await nextHour.createCurrentConditionObjects(this);\r\n        await nextHour.createDailyForecastObjects(this);\r\n        await nextHour.createSummaryObjects(this);\r\n\r\n        await this.extendObject('CurrentNextUpdate', {\r\n            type: 'state',\r\n            common: {\r\n                name: 'Last Update of Current Weather',\r\n                type: 'number',\r\n                role: 'date',\r\n                read: true,\r\n                write: false,\r\n            },\r\n            native: {},\r\n        });\r\n        await this.extendObject('HourlyNextUpdate', {\r\n            type: 'state',\r\n            common: {\r\n                name: 'Last Update of Hourly Weather',\r\n                type: 'number',\r\n                role: 'date',\r\n                read: true,\r\n                write: false,\r\n            },\r\n            native: {},\r\n        });\r\n        await this.extendObject('DailyNextUpdate', {\r\n            type: 'state',\r\n            common: {\r\n                name: 'Last Update of Daily Weather',\r\n                type: 'number',\r\n                role: 'date',\r\n                read: true,\r\n                write: false,\r\n            },\r\n            native: {},\r\n        });\r\n        const startForbidden: { current?: boolean; hourly?: boolean; daily?: boolean } = {};\r\n\r\n        let state = await this.getStateAsync('CurrentNextUpdate');\r\n        startForbidden.current = !!(state && state.val && Number(state.val) + 66 * 60000 > Date.now()); // every hour + random 5 Minutes + random 10 seconds\r\n\r\n        state = await this.getStateAsync('HourlyNextUpdate');\r\n        startForbidden.hourly = !!(\r\n            state &&\r\n            state.ts &&\r\n            state.ts +\r\n                (new Date().setHours(7, 5, 0) < Date.now() && new Date().setHours(20, 6, 0) > Date.now() ? 13 : 11) *\r\n                    60 *\r\n                    60000 +\r\n                360000 >\r\n                Date.now()\r\n        );\r\n        state = await this.getStateAsync('DailyNextUpdate');\r\n        startForbidden.daily = !!(state && state.ts && state.ts + 6 * 60 * 60000 + 360000 > Date.now()); // every 6 hour s+ random 5 Minutes + random 10 seconds\r\n\r\n        updateInterval = this.setInterval(() => {\r\n            const now = new Date();\r\n            if ((now.getHours() === 7 || now.getHours() === 20) && now.getMinutes() < 5) {\r\n                const _get5DaysTimeout = (): void => {\r\n                    timeout1 && this.clearTimeout(timeout1);\r\n                    timeout1 = this.setTimeout(\r\n                        async () => {\r\n                            try {\r\n                                timeout1 = null;\r\n                                await this.request5Days();\r\n                            } catch (error: any) {\r\n                                if (this.errorLog(error)) {\r\n                                    this.log.info(`Retry in 10 Minutes`);\r\n                                    timeout1 = this.setTimeout(_get5DaysTimeout, 600000);\r\n                                }\r\n                            }\r\n                        },\r\n                        Math.random() * 10000 + 1,\r\n                    );\r\n                };\r\n                _get5DaysTimeout();\r\n            }\r\n            if (now.getMinutes() < 5) {\r\n                const _getMinutesTimeout = (): void => {\r\n                    timeout2 && this.clearTimeout(timeout2);\r\n                    timeout2 = this.setTimeout(\r\n                        async () => {\r\n                            try {\r\n                                timeout2 = null;\r\n                                await this.requestCurrent();\r\n                            } catch (error: any) {\r\n                                if (this.errorLog(error)) {\r\n                                    this.log.info(`Retry in 10 Minutes`);\r\n                                    timeout2 = this.setTimeout(_getMinutesTimeout, 600000);\r\n                                }\r\n                            }\r\n                        },\r\n                        Math.random() * 10000 + 1,\r\n                    );\r\n                };\r\n                _getMinutesTimeout();\r\n            }\r\n            if (\r\n                (now.getHours() === 6 || now.getHours() === 12 || now.getHours() === 18 || now.getHours() === 0) &&\r\n                now.getMinutes() < 5\r\n            ) {\r\n                const _get12HoursTimeout = (): void => {\r\n                    timeout3 && this.clearTimeout(timeout3);\r\n                    timeout3 = this.setTimeout(\r\n                        async () => {\r\n                            try {\r\n                                timeout3 = null;\r\n                                await this.request12Hours();\r\n                            } catch (error: any) {\r\n                                if (this.errorLog(error)) {\r\n                                    this.log.info(`Retry in 10 Minutes`);\r\n                                    timeout3 = this.setTimeout(_get12HoursTimeout, 600000);\r\n                                }\r\n                            }\r\n                        },\r\n                        Math.random() * 10000 + 1,\r\n                    );\r\n                };\r\n                _get12HoursTimeout();\r\n            }\r\n        }, 300000); // 5 minutes\r\n        try {\r\n            if (!startForbidden.hourly) {\r\n                this.log.info('Update hourly weather!');\r\n                await this.request12Hours();\r\n            }\r\n            if (!startForbidden.current) {\r\n                this.log.info('Update current weather!');\r\n                await this.requestCurrent();\r\n            }\r\n            if (!startForbidden.daily) {\r\n                this.log.info('Update daily weather!');\r\n                await this.request5Days();\r\n            }\r\n        } catch (error: any) {\r\n            this.errorLog(error);\r\n        }\r\n\r\n        /*\r\n            For every state in the system, there has to be also an object of type state\r\n            Here a simple template for a boolean variable named \"testVariable\"\r\n            Because every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\r\n            */\r\n\r\n        await this.extendObject('updateCurrent', {\r\n            type: 'state',\r\n            common: {\r\n                name: 'Update Current Weather',\r\n                type: 'boolean',\r\n                role: 'button',\r\n                read: false,\r\n                write: true,\r\n            },\r\n            native: {},\r\n        });\r\n        await this.extendObject('updateHourly', {\r\n            type: 'state',\r\n            common: {\r\n                name: 'Update 12 Hours Forecast',\r\n                type: 'boolean',\r\n                role: 'button',\r\n                read: false,\r\n                write: true,\r\n            },\r\n            native: {},\r\n        });\r\n        await this.extendObject('updateDaily', {\r\n            type: 'state',\r\n            common: {\r\n                name: 'Update 5 Days Forecast',\r\n                type: 'boolean',\r\n                role: 'button',\r\n                read: false,\r\n                write: true,\r\n            },\r\n            native: {},\r\n        });\r\n\r\n        // in this template, all states changes inside the adapter's namespace are subscribed\r\n        await this.subscribeStatesAsync('updateCurrent');\r\n        await this.subscribeStatesAsync('updateHourly');\r\n        await this.subscribeStatesAsync('updateDaily');\r\n    }\r\n\r\n    private errorLog(error: any): boolean {\r\n        if (error && error.cause && error.cause.status) {\r\n            if (error.cause.status === 503) {\r\n                this.log.error(\r\n                    `${error.message} - apikey incorrect, too many queries or incorrect settings in accuweather!`,\r\n                );\r\n            } else {\r\n                this.log.error(`${error.message} - User action required!`);\r\n            }\r\n            return false;\r\n        }\r\n        this.log.error(error);\r\n        return true;\r\n    }\r\n    /**\r\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n     *\r\n     * @param callback - The callback function to be called when the unload process is complete\r\n     */\r\n    private onUnload(callback: () => void): void {\r\n        try {\r\n            this.log.info('cleaned everything up...');\r\n            updateInterval && this.clearInterval(updateInterval);\r\n            updateInterval = null;\r\n\r\n            timeout1 && this.clearTimeout(timeout1);\r\n            timeout1 = null;\r\n\r\n            timeout2 && this.clearTimeout(timeout2);\r\n            timeout2 = null;\r\n\r\n            timeout3 && this.clearTimeout(timeout3);\r\n            timeout3 = null;\r\n\r\n            callback();\r\n        } catch {\r\n            callback && callback();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Is called if a subscribed state changes\r\n     *\r\n     * @param id - The id of the state that changed\r\n     * @param state - The state object that changed\r\n     */\r\n    async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\r\n        if (state) {\r\n            if (!state.ack) {\r\n                try {\r\n                    // The state was changed\r\n                    if (id === `${this.namespace}.updateCurrent`) {\r\n                        await this.requestCurrent();\r\n                    } else if (id === `${this.namespace}.updateHourly`) {\r\n                        await this.request12Hours();\r\n                    } else if (id === `${this.namespace}.updateDaily`) {\r\n                        await this.request5Days();\r\n                    }\r\n                    this.log.debug(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\r\n                } catch (error: any) {\r\n                    this.log.error(error);\r\n                }\r\n            }\r\n        } else {\r\n            // The state was deleted\r\n            this.log.debug(`state ${id} deleted`);\r\n        }\r\n    }\r\n}\r\n\r\nif (require.main !== module) {\r\n    // Export the constructor in compact mode\r\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Accuweather(options);\r\n} else {\r\n    // otherwise start the instance directly\r\n    (() => new Accuweather())();\r\n}\r\n\r\nexport = Accuweather;\r\n"],
  "mappings": "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",
  "names": []
}
