{
  "version": 3,
  "sources": ["../../src/lib/accuapi.ts"],
  "sourcesContent": ["'use strict';\r\nimport axios from 'axios';\r\naxios.defaults.timeout = 10000;\r\n//const moment = require(\"moment\");\r\nimport queryString from 'qs';\r\n\r\n/**\r\n * Class representing the AccuWeather API.\r\n */\r\nexport class Accuapi {\r\n    apiKey: string;\r\n    lokey: string | number;\r\n    query: any;\r\n    time: string = '';\r\n    url: string = '';\r\n    /**\r\n     * Create an instance of Accuapi.\r\n     *\r\n     * @param apiKey - The API key for accessing AccuWeather.\r\n     */\r\n    constructor(apiKey: any) {\r\n        this.apiKey = apiKey;\r\n        this.lokey = 335315;\r\n        this.query = {};\r\n        //this.adapter = adapter;\r\n    }\r\n\r\n    /**\r\n     * Set the location key.\r\n     *\r\n     * @param lkey - The location key.\r\n     * @returns The instance of Accuapi.\r\n     */\r\n    localkey(lkey: string): Accuapi {\r\n        // Unique ID that can be used to search for a specific location.\r\n\r\n        !lkey ? null : (this.lokey = lkey);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the time interval.\r\n     *\r\n     * @param val - The time interval value.\r\n     * @returns Accuapi The instance of Accuapi.\r\n     */\r\n    timeInt(val = ''): Accuapi {\r\n        // Unique ID that can be used to search for a specific location.\r\n\r\n        !val ? (this.time = 'hourly/1hour') : (this.time = val);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the language for the API request.\r\n     *\r\n     * @param lan - The language code in which to return the resource.\r\n     *                       Refer to http://apidev.accuweather.com/developers/languages for valid language codes.\r\n     *                       If not provided, the default value is 'en-us'.\r\n     * @returns The current instance of the API object to allow for method chaining.\r\n     */\r\n    language(lan: string): Accuapi {\r\n        // http://apidev.accuweather.com/developers/languages\r\n        // String indicating the language in which to return the resource.\r\n        // Default value set to en-us.\r\n\r\n        !lan ? null : (this.query.language = lan);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the details flag.\r\n     *\r\n     * @param bool - Specifies whether or not to include the full object.\r\n     * @returns The instance of Accuapi.\r\n     */\r\n    details(bool: boolean): Accuapi {\r\n        // Boolean value (true or false) specifies whether or not to include the full object.\r\n        // Default value set to false.\r\n        // (For location searches, details = true will return AccuWeather related details).\r\n\r\n        !bool ? null : (this.query.details = bool);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the getphotos flag\r\n     *\r\n     * @param bool Specifies whether or not to include photos.\r\n     * @returns The instance of Accuapi.\r\n     */\r\n    getphotos(bool: boolean): Accuapi {\r\n        // Boolean value (true or false) specifies whether or not to include the photos.\r\n        // Default value set to false.\r\n\r\n        !bool ? null : (this.query.getphotos = bool);\r\n        return this;\r\n    }\r\n    /**\r\n     * Set the metric flag.\r\n     *\r\n     * @param bool - Specifies whether to return the data in metric units.\r\n     * @returns The instance of Accuapi.\r\n     */\r\n    metric(bool: boolean): Accuapi {\r\n        // Boolean value (true or false) that specifies to return the data in either metric (=true) or imperial units.\r\n\r\n        !bool ? null : (this.query.metric = bool);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Generates the request URL for the AccuWeather API\r\n     *\r\n     * @param current - A boolean indicating whether to generate the URL for current conditions or forecasts.\r\n     *                            If true, the URL for current conditions is generated.\r\n     */\r\n    generateReqUrl(current = false): void {\r\n        if (current) {\r\n            this.url = `http://dataservice.accuweather.com/currentconditions/v1/${this.lokey}?apikey=${this.apiKey}`;\r\n        } else {\r\n            this.url = `http://dataservice.accuweather.com/forecasts/v1/${this.time}/${this.lokey}?apikey=${this.apiKey}`;\r\n        }\r\n        this.query ? (this.url += `&${queryString.stringify(this.query)}`) : this.url;\r\n    }\r\n\r\n    /**\r\n     * Retrieves the weather data from the AccuWeather API.\r\n     *\r\n     * @returns A promise that resolves to the weather data.\r\n     * @throws {Error} Throws an error if the forecast cannot be retrieved.\r\n     */\r\n    async get(): Promise<any> {\r\n        this.generateReqUrl();\r\n        let response;\r\n        try {\r\n            response = await axios.get(this.url ? this.url : '');\r\n            if (typeof response.data !== 'object') {\r\n                throw new Error(`Status: ${response.status} text: ${response.statusText}`, {\r\n                    cause: {\r\n                        status: 503,\r\n                        text: 'Service Unavailable',\r\n                    },\r\n                });\r\n            }\r\n            return response.data;\r\n        } catch (error: any) {\r\n            if (error && error.cause && error.cause.status === 503) {\r\n                throw new Error(`Status: ${error.cause.status} text: ${error.cause.text}`, {\r\n                    cause: {\r\n                        status: error.cause.status,\r\n                        text: error.cause.text,\r\n                    },\r\n                });\r\n            } else if (error && ((error.status >= 400 && error.status <= 500) || error.status === 503)) {\r\n                throw new Error(`Status: ${error.response.status} text: ${error.response.statusText}`, {\r\n                    cause: {\r\n                        status: error.status,\r\n                        text: error.statusText,\r\n                    },\r\n                });\r\n            } else {\r\n                throw new Error(\r\n                    `Forecast cannot be retrieved. ERROR: Status:${error.status || 'none'} ${(error.response && JSON.stringify(error.response.data)) || error.toString()}`,\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the current weather data from the AccuWeather API.\r\n     *\r\n     * @returns A promise that resolves to the current weather data.\r\n     * @throws {Error} Throws an error if the forecast cannot be retrieved.\r\n     */\r\n    async getCurrent(): Promise<any> {\r\n        //\r\n        //const body = require(\"./test-data/currentCond.json\");\r\n        //\r\n        this.generateReqUrl(true);\r\n        let response;\r\n        try {\r\n            response = await axios.get(this.url ? this.url : '');\r\n            if (typeof response.data !== 'object') {\r\n                throw new Error(`Status: ${response.status} text: ${response.statusText}`, {\r\n                    cause: {\r\n                        status: 503,\r\n                        text: 'Service Unavailable',\r\n                    },\r\n                });\r\n            }\r\n            return response.data;\r\n        } catch (error: any) {\r\n            if (error && error.cause && error.cause.status === 503) {\r\n                throw new Error(`Status: ${error.cause.status} text: ${error.cause.text}`, {\r\n                    cause: {\r\n                        status: error.cause.status,\r\n                        text: error.cause.text,\r\n                    },\r\n                });\r\n            } else if (error && ((error.status >= 400 && error.status <= 500) || error.status === 503)) {\r\n                throw new Error(`Status: ${error.response.status} text: ${error.response.statusText}`, {\r\n                    cause: {\r\n                        status: error.status,\r\n                        text: error.statusText,\r\n                    },\r\n                });\r\n            } else {\r\n                throw new Error(\r\n                    `Forecast cannot be retrieved. ERROR: Status:${error.status || 'none'} ${(error.response && JSON.stringify(error.response.data)) || error.toString()}`,\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["axios", "queryString"]
}
